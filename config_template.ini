# The configuration file for the bot. All config values are documented.
# It is not recommended to rename or modify any existing values or dictionaries.
# This config file is compatible with versions 2.x or higher.

[Secrets]  # Any tokens, api keys or secret info is here.

discord_bot_token = your_token_here
# The discord bot token. (required)
# You can get one from https://discord.com/developers in your apps.
# NOTE: This absolutely CANNOT be a user account token. Selfbotting is against the TOS.

google_api_keys = []
# The API key(s) to interact with Google's APIs. (optional)
# You can get one from https://console.cloud.google.com/apis.

google_search_engine_id = your_google_search_engine_id_here
# The custom search engine ID to use with Google search. (optional)
# This is mainly for use in making requests to Google's custom search API.
# You can get one from https://cse.google.com.

weatherapi_api_key = your_weatherapi_api_key_here
# The API key to interact with weatherAPI. (optional)
# You can get one from https://weatherapi.com.

steam_api_key = your_api_key_here
# The API key to interact with Steam's APIs. (optional)
# You can get one from https://steamcommunity.com/dev/apikey.

webhook_url = your_webhook_url_here
# The webhook which will send error traceback reports and contact messages. (required)
# See https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks for more information.


[Discord Bot Config]  # General config stuff.

description = A (mostly) user-friendly Discord bot with basic moderation, fun commands, image manipulation and more.
	This bot is currently only maintained by an individual, so features and fixes may take some time to release.
# Kind of like the "about section" of your bot, you can put down what your bot does, etc.

links = {
	"Discord Server": "https://discord.gg/xHgh2Xg",
	"Source": "https://github.com/HitSyr/Sleepy"
	}
# The links associated with the bot, this can include github links, support service(s), etc.

prefixes = [
	"$*"
	]
# The bot's prefix(es). (list of str)
# `@mentions` are also included as prefixes and are used regardless of the prefixes entered above.

blocklist = []
# A list of user and guild IDs that are blocked from using the bot. (list of int)
# If a user ID is given, then the user is globally blocked from using the bot.
# -  This status applies to the user SOLELY, no matter what guild or channel they are in.
# If a guild ID is given, then all commands passed in that guild are ignored.
# -  This status ONLY applies to that guild and not any users.
# -  Commands can still be used outside of that guild.
# For now, this can only be modified manally.

owner_ids = []
# A list of user IDs that own the bot. (list of int)
# These users can use any commands, including those restricted to the bot owner.
# > WARNING: These users can bypass cooldowns and (almost) all checks set on the bot.
# This is a dangerous permission to grant.
# This can be used whether or not the bot is a team app.
# If this is left empty, then owners are fetched automatically upon startup.
# For now, this can only be modified manally.


[Default Presence Config]  # Configurations regarding bot presence.

presence = {
	# Data about the bot's presence.
	"status": "online",
	# The Discord status (dot colour). (str)
	# Can be online, offline, dnd, idle or invisible. (must be lowercase)
	# Defaults to ``online`` if `null`.
	"afk": false,
	# Indicates if the bot will be going AFK. (Boolean)
	# Defaults to ``false`` if ``null``.
	"activity": {
		# The data for the activity.
		# This is ignored if ``doing_activity`` is ``false``.
		"name": "{prefix}help",
		# The name of the `activity` the bot will do.
		# NOTE: Anything surrounded in curly brackets "{}" are considered placeholders.
		# You should escape these if you plan to use them without specifying a placeholder.
		# Valid Placeholders:
		#  -  {prefix} : Displays the first prefix in the prefixes list. (str)
		#  -  {guilds} : Displays how many guilds the bot is in. (int)
		#  -  {channels} : Displays how many channels the bot can see. (int)
		#  -  {users} : Displays the amount of users the bot can see. (int)
		#  -  {bot} : The bot. (commands.Bot)
		"type": 0,
		# The type of activity the bot will do. (int)
		# Defaults to ``0`` if ``null``.
		#  -  0: Playing
		#  -  1: Streaming (must have valid twitch/youtube url)
		#  -  2: Listening
		#  -  3: Watching
		#  -  4: Custom activity (Bots can't actually set custom activities.)
		"url": "https://www.youtube.com/watch?v=videoid"
		#"url": "https://twitch.tv/name"
		# The youtube/twitch url needed for the streaming activity. (str)
		# Ignored if activity type isn't ``1``.
		# Activity type defaults to ``0`` if no valid youtube/twitch url is set.
		# Example 1: https://twitch.tv/name
		# Example 2: https://www.youtube.com/watch?v=videoid
		}
	}

doing_activity = false
# Whether or not to show the activity. (bool)
# ``activity`` is ignored if set to ``false``.


[Extension Config]  # Configurations having to do with handling extensions.

exts_directory = SleepyBot/ext
# Directory to the folder the extensions are stored in.
# Folders are separated via forward slashes (/).
# Example: botfiles/important/extensions

exts = [
	"Owner"
	]
# The extensions to load when ``autoload_enabled`` is set to ``false``.
# This allows for finer grained control of which extensions to load or ignore.
# Folders to extensions are separated via periods (.).
# The extensions directory is already considered, so you don't have to explicitly
# state the directory to every cog already within the base cog directory.
# Example 1: Owner -> "exts_directory.Owner"
# Example 2: sub.deep.extension -> "exts_directory.sub.deep.extension"

autoload_enabled = true
# Whether or not the bot should automatically load all extensions in the extensions folder upon start up. (bool)
